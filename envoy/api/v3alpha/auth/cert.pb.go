// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/api/v3alpha/auth/cert.proto

package envoy_api_v3alpha_auth

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	core "github.com/envoyproxy/go-control-plane/envoy/api/v3alpha/core"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TlsParameters_TlsProtocol int32

const (
	TlsParameters_TLS_AUTO TlsParameters_TlsProtocol = 0
	TlsParameters_TLSv1_0  TlsParameters_TlsProtocol = 1
	TlsParameters_TLSv1_1  TlsParameters_TlsProtocol = 2
	TlsParameters_TLSv1_2  TlsParameters_TlsProtocol = 3
	TlsParameters_TLSv1_3  TlsParameters_TlsProtocol = 4
)

var TlsParameters_TlsProtocol_name = map[int32]string{
	0: "TLS_AUTO",
	1: "TLSv1_0",
	2: "TLSv1_1",
	3: "TLSv1_2",
	4: "TLSv1_3",
}

var TlsParameters_TlsProtocol_value = map[string]int32{
	"TLS_AUTO": 0,
	"TLSv1_0":  1,
	"TLSv1_1":  2,
	"TLSv1_2":  3,
	"TLSv1_3":  4,
}

func (x TlsParameters_TlsProtocol) String() string {
	return proto.EnumName(TlsParameters_TlsProtocol_name, int32(x))
}

func (TlsParameters_TlsProtocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_844857edcba8a23f, []int{0, 0}
}

type TlsParameters struct {
	TlsMinimumProtocolVersion TlsParameters_TlsProtocol `protobuf:"varint,1,opt,name=tls_minimum_protocol_version,json=tlsMinimumProtocolVersion,proto3,enum=envoy.api.v3alpha.auth.TlsParameters_TlsProtocol" json:"tls_minimum_protocol_version,omitempty"`
	TlsMaximumProtocolVersion TlsParameters_TlsProtocol `protobuf:"varint,2,opt,name=tls_maximum_protocol_version,json=tlsMaximumProtocolVersion,proto3,enum=envoy.api.v3alpha.auth.TlsParameters_TlsProtocol" json:"tls_maximum_protocol_version,omitempty"`
	CipherSuites              []string                  `protobuf:"bytes,3,rep,name=cipher_suites,json=cipherSuites,proto3" json:"cipher_suites,omitempty"`
	EcdhCurves                []string                  `protobuf:"bytes,4,rep,name=ecdh_curves,json=ecdhCurves,proto3" json:"ecdh_curves,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                  `json:"-"`
	XXX_unrecognized          []byte                    `json:"-"`
	XXX_sizecache             int32                     `json:"-"`
}

func (m *TlsParameters) Reset()         { *m = TlsParameters{} }
func (m *TlsParameters) String() string { return proto.CompactTextString(m) }
func (*TlsParameters) ProtoMessage()    {}
func (*TlsParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_844857edcba8a23f, []int{0}
}

func (m *TlsParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TlsParameters.Unmarshal(m, b)
}
func (m *TlsParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TlsParameters.Marshal(b, m, deterministic)
}
func (m *TlsParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TlsParameters.Merge(m, src)
}
func (m *TlsParameters) XXX_Size() int {
	return xxx_messageInfo_TlsParameters.Size(m)
}
func (m *TlsParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_TlsParameters.DiscardUnknown(m)
}

var xxx_messageInfo_TlsParameters proto.InternalMessageInfo

func (m *TlsParameters) GetTlsMinimumProtocolVersion() TlsParameters_TlsProtocol {
	if m != nil {
		return m.TlsMinimumProtocolVersion
	}
	return TlsParameters_TLS_AUTO
}

func (m *TlsParameters) GetTlsMaximumProtocolVersion() TlsParameters_TlsProtocol {
	if m != nil {
		return m.TlsMaximumProtocolVersion
	}
	return TlsParameters_TLS_AUTO
}

func (m *TlsParameters) GetCipherSuites() []string {
	if m != nil {
		return m.CipherSuites
	}
	return nil
}

func (m *TlsParameters) GetEcdhCurves() []string {
	if m != nil {
		return m.EcdhCurves
	}
	return nil
}

type PrivateKeyProvider struct {
	ProviderName string `protobuf:"bytes,1,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	// Types that are valid to be assigned to ConfigType:
	//	*PrivateKeyProvider_TypedConfig
	ConfigType           isPrivateKeyProvider_ConfigType `protobuf_oneof:"config_type"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *PrivateKeyProvider) Reset()         { *m = PrivateKeyProvider{} }
func (m *PrivateKeyProvider) String() string { return proto.CompactTextString(m) }
func (*PrivateKeyProvider) ProtoMessage()    {}
func (*PrivateKeyProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_844857edcba8a23f, []int{1}
}

func (m *PrivateKeyProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateKeyProvider.Unmarshal(m, b)
}
func (m *PrivateKeyProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateKeyProvider.Marshal(b, m, deterministic)
}
func (m *PrivateKeyProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateKeyProvider.Merge(m, src)
}
func (m *PrivateKeyProvider) XXX_Size() int {
	return xxx_messageInfo_PrivateKeyProvider.Size(m)
}
func (m *PrivateKeyProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateKeyProvider.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateKeyProvider proto.InternalMessageInfo

func (m *PrivateKeyProvider) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

type isPrivateKeyProvider_ConfigType interface {
	isPrivateKeyProvider_ConfigType()
}

type PrivateKeyProvider_TypedConfig struct {
	TypedConfig *any.Any `protobuf:"bytes,3,opt,name=typed_config,json=typedConfig,proto3,oneof"`
}

func (*PrivateKeyProvider_TypedConfig) isPrivateKeyProvider_ConfigType() {}

func (m *PrivateKeyProvider) GetConfigType() isPrivateKeyProvider_ConfigType {
	if m != nil {
		return m.ConfigType
	}
	return nil
}

func (m *PrivateKeyProvider) GetTypedConfig() *any.Any {
	if x, ok := m.GetConfigType().(*PrivateKeyProvider_TypedConfig); ok {
		return x.TypedConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PrivateKeyProvider) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PrivateKeyProvider_TypedConfig)(nil),
	}
}

type TlsCertificate struct {
	CertificateChain           *core.DataSource    `protobuf:"bytes,1,opt,name=certificate_chain,json=certificateChain,proto3" json:"certificate_chain,omitempty"`
	PrivateKey                 *core.DataSource    `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	PrivateKeyProvider         *PrivateKeyProvider `protobuf:"bytes,6,opt,name=private_key_provider,json=privateKeyProvider,proto3" json:"private_key_provider,omitempty"`
	Password                   *core.DataSource    `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	OcspStaple                 *core.DataSource    `protobuf:"bytes,4,opt,name=ocsp_staple,json=ocspStaple,proto3" json:"ocsp_staple,omitempty"`
	SignedCertificateTimestamp []*core.DataSource  `protobuf:"bytes,5,rep,name=signed_certificate_timestamp,json=signedCertificateTimestamp,proto3" json:"signed_certificate_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}            `json:"-"`
	XXX_unrecognized           []byte              `json:"-"`
	XXX_sizecache              int32               `json:"-"`
}

func (m *TlsCertificate) Reset()         { *m = TlsCertificate{} }
func (m *TlsCertificate) String() string { return proto.CompactTextString(m) }
func (*TlsCertificate) ProtoMessage()    {}
func (*TlsCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_844857edcba8a23f, []int{2}
}

func (m *TlsCertificate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TlsCertificate.Unmarshal(m, b)
}
func (m *TlsCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TlsCertificate.Marshal(b, m, deterministic)
}
func (m *TlsCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TlsCertificate.Merge(m, src)
}
func (m *TlsCertificate) XXX_Size() int {
	return xxx_messageInfo_TlsCertificate.Size(m)
}
func (m *TlsCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_TlsCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_TlsCertificate proto.InternalMessageInfo

func (m *TlsCertificate) GetCertificateChain() *core.DataSource {
	if m != nil {
		return m.CertificateChain
	}
	return nil
}

func (m *TlsCertificate) GetPrivateKey() *core.DataSource {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *TlsCertificate) GetPrivateKeyProvider() *PrivateKeyProvider {
	if m != nil {
		return m.PrivateKeyProvider
	}
	return nil
}

func (m *TlsCertificate) GetPassword() *core.DataSource {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *TlsCertificate) GetOcspStaple() *core.DataSource {
	if m != nil {
		return m.OcspStaple
	}
	return nil
}

func (m *TlsCertificate) GetSignedCertificateTimestamp() []*core.DataSource {
	if m != nil {
		return m.SignedCertificateTimestamp
	}
	return nil
}

type TlsSessionTicketKeys struct {
	Keys                 []*core.DataSource `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TlsSessionTicketKeys) Reset()         { *m = TlsSessionTicketKeys{} }
func (m *TlsSessionTicketKeys) String() string { return proto.CompactTextString(m) }
func (*TlsSessionTicketKeys) ProtoMessage()    {}
func (*TlsSessionTicketKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_844857edcba8a23f, []int{3}
}

func (m *TlsSessionTicketKeys) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TlsSessionTicketKeys.Unmarshal(m, b)
}
func (m *TlsSessionTicketKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TlsSessionTicketKeys.Marshal(b, m, deterministic)
}
func (m *TlsSessionTicketKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TlsSessionTicketKeys.Merge(m, src)
}
func (m *TlsSessionTicketKeys) XXX_Size() int {
	return xxx_messageInfo_TlsSessionTicketKeys.Size(m)
}
func (m *TlsSessionTicketKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_TlsSessionTicketKeys.DiscardUnknown(m)
}

var xxx_messageInfo_TlsSessionTicketKeys proto.InternalMessageInfo

func (m *TlsSessionTicketKeys) GetKeys() []*core.DataSource {
	if m != nil {
		return m.Keys
	}
	return nil
}

type CertificateValidationContext struct {
	TrustedCa                         *core.DataSource    `protobuf:"bytes,1,opt,name=trusted_ca,json=trustedCa,proto3" json:"trusted_ca,omitempty"`
	VerifyCertificateSpki             []string            `protobuf:"bytes,3,rep,name=verify_certificate_spki,json=verifyCertificateSpki,proto3" json:"verify_certificate_spki,omitempty"`
	VerifyCertificateHash             []string            `protobuf:"bytes,2,rep,name=verify_certificate_hash,json=verifyCertificateHash,proto3" json:"verify_certificate_hash,omitempty"`
	VerifySubjectAltName              []string            `protobuf:"bytes,4,rep,name=verify_subject_alt_name,json=verifySubjectAltName,proto3" json:"verify_subject_alt_name,omitempty"`
	RequireOcspStaple                 *wrappers.BoolValue `protobuf:"bytes,5,opt,name=require_ocsp_staple,json=requireOcspStaple,proto3" json:"require_ocsp_staple,omitempty"`
	RequireSignedCertificateTimestamp *wrappers.BoolValue `protobuf:"bytes,6,opt,name=require_signed_certificate_timestamp,json=requireSignedCertificateTimestamp,proto3" json:"require_signed_certificate_timestamp,omitempty"`
	Crl                               *core.DataSource    `protobuf:"bytes,7,opt,name=crl,proto3" json:"crl,omitempty"`
	AllowExpiredCertificate           bool                `protobuf:"varint,8,opt,name=allow_expired_certificate,json=allowExpiredCertificate,proto3" json:"allow_expired_certificate,omitempty"`
	XXX_NoUnkeyedLiteral              struct{}            `json:"-"`
	XXX_unrecognized                  []byte              `json:"-"`
	XXX_sizecache                     int32               `json:"-"`
}

func (m *CertificateValidationContext) Reset()         { *m = CertificateValidationContext{} }
func (m *CertificateValidationContext) String() string { return proto.CompactTextString(m) }
func (*CertificateValidationContext) ProtoMessage()    {}
func (*CertificateValidationContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_844857edcba8a23f, []int{4}
}

func (m *CertificateValidationContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateValidationContext.Unmarshal(m, b)
}
func (m *CertificateValidationContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateValidationContext.Marshal(b, m, deterministic)
}
func (m *CertificateValidationContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateValidationContext.Merge(m, src)
}
func (m *CertificateValidationContext) XXX_Size() int {
	return xxx_messageInfo_CertificateValidationContext.Size(m)
}
func (m *CertificateValidationContext) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateValidationContext.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateValidationContext proto.InternalMessageInfo

func (m *CertificateValidationContext) GetTrustedCa() *core.DataSource {
	if m != nil {
		return m.TrustedCa
	}
	return nil
}

func (m *CertificateValidationContext) GetVerifyCertificateSpki() []string {
	if m != nil {
		return m.VerifyCertificateSpki
	}
	return nil
}

func (m *CertificateValidationContext) GetVerifyCertificateHash() []string {
	if m != nil {
		return m.VerifyCertificateHash
	}
	return nil
}

func (m *CertificateValidationContext) GetVerifySubjectAltName() []string {
	if m != nil {
		return m.VerifySubjectAltName
	}
	return nil
}

func (m *CertificateValidationContext) GetRequireOcspStaple() *wrappers.BoolValue {
	if m != nil {
		return m.RequireOcspStaple
	}
	return nil
}

func (m *CertificateValidationContext) GetRequireSignedCertificateTimestamp() *wrappers.BoolValue {
	if m != nil {
		return m.RequireSignedCertificateTimestamp
	}
	return nil
}

func (m *CertificateValidationContext) GetCrl() *core.DataSource {
	if m != nil {
		return m.Crl
	}
	return nil
}

func (m *CertificateValidationContext) GetAllowExpiredCertificate() bool {
	if m != nil {
		return m.AllowExpiredCertificate
	}
	return false
}

type CommonTlsContext struct {
	TlsParams                      *TlsParameters     `protobuf:"bytes,1,opt,name=tls_params,json=tlsParams,proto3" json:"tls_params,omitempty"`
	TlsCertificates                []*TlsCertificate  `protobuf:"bytes,2,rep,name=tls_certificates,json=tlsCertificates,proto3" json:"tls_certificates,omitempty"`
	TlsCertificateSdsSecretConfigs []*SdsSecretConfig `protobuf:"bytes,6,rep,name=tls_certificate_sds_secret_configs,json=tlsCertificateSdsSecretConfigs,proto3" json:"tls_certificate_sds_secret_configs,omitempty"`
	// Types that are valid to be assigned to ValidationContextType:
	//	*CommonTlsContext_ValidationContext
	//	*CommonTlsContext_ValidationContextSdsSecretConfig
	//	*CommonTlsContext_CombinedValidationContext
	ValidationContextType isCommonTlsContext_ValidationContextType `protobuf_oneof:"validation_context_type"`
	AlpnProtocols         []string                                 `protobuf:"bytes,4,rep,name=alpn_protocols,json=alpnProtocols,proto3" json:"alpn_protocols,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                                 `json:"-"`
	XXX_unrecognized      []byte                                   `json:"-"`
	XXX_sizecache         int32                                    `json:"-"`
}

func (m *CommonTlsContext) Reset()         { *m = CommonTlsContext{} }
func (m *CommonTlsContext) String() string { return proto.CompactTextString(m) }
func (*CommonTlsContext) ProtoMessage()    {}
func (*CommonTlsContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_844857edcba8a23f, []int{5}
}

func (m *CommonTlsContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonTlsContext.Unmarshal(m, b)
}
func (m *CommonTlsContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonTlsContext.Marshal(b, m, deterministic)
}
func (m *CommonTlsContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonTlsContext.Merge(m, src)
}
func (m *CommonTlsContext) XXX_Size() int {
	return xxx_messageInfo_CommonTlsContext.Size(m)
}
func (m *CommonTlsContext) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonTlsContext.DiscardUnknown(m)
}

var xxx_messageInfo_CommonTlsContext proto.InternalMessageInfo

func (m *CommonTlsContext) GetTlsParams() *TlsParameters {
	if m != nil {
		return m.TlsParams
	}
	return nil
}

func (m *CommonTlsContext) GetTlsCertificates() []*TlsCertificate {
	if m != nil {
		return m.TlsCertificates
	}
	return nil
}

func (m *CommonTlsContext) GetTlsCertificateSdsSecretConfigs() []*SdsSecretConfig {
	if m != nil {
		return m.TlsCertificateSdsSecretConfigs
	}
	return nil
}

type isCommonTlsContext_ValidationContextType interface {
	isCommonTlsContext_ValidationContextType()
}

type CommonTlsContext_ValidationContext struct {
	ValidationContext *CertificateValidationContext `protobuf:"bytes,3,opt,name=validation_context,json=validationContext,proto3,oneof"`
}

type CommonTlsContext_ValidationContextSdsSecretConfig struct {
	ValidationContextSdsSecretConfig *SdsSecretConfig `protobuf:"bytes,7,opt,name=validation_context_sds_secret_config,json=validationContextSdsSecretConfig,proto3,oneof"`
}

type CommonTlsContext_CombinedValidationContext struct {
	CombinedValidationContext *CommonTlsContext_CombinedCertificateValidationContext `protobuf:"bytes,8,opt,name=combined_validation_context,json=combinedValidationContext,proto3,oneof"`
}

func (*CommonTlsContext_ValidationContext) isCommonTlsContext_ValidationContextType() {}

func (*CommonTlsContext_ValidationContextSdsSecretConfig) isCommonTlsContext_ValidationContextType() {}

func (*CommonTlsContext_CombinedValidationContext) isCommonTlsContext_ValidationContextType() {}

func (m *CommonTlsContext) GetValidationContextType() isCommonTlsContext_ValidationContextType {
	if m != nil {
		return m.ValidationContextType
	}
	return nil
}

func (m *CommonTlsContext) GetValidationContext() *CertificateValidationContext {
	if x, ok := m.GetValidationContextType().(*CommonTlsContext_ValidationContext); ok {
		return x.ValidationContext
	}
	return nil
}

func (m *CommonTlsContext) GetValidationContextSdsSecretConfig() *SdsSecretConfig {
	if x, ok := m.GetValidationContextType().(*CommonTlsContext_ValidationContextSdsSecretConfig); ok {
		return x.ValidationContextSdsSecretConfig
	}
	return nil
}

func (m *CommonTlsContext) GetCombinedValidationContext() *CommonTlsContext_CombinedCertificateValidationContext {
	if x, ok := m.GetValidationContextType().(*CommonTlsContext_CombinedValidationContext); ok {
		return x.CombinedValidationContext
	}
	return nil
}

func (m *CommonTlsContext) GetAlpnProtocols() []string {
	if m != nil {
		return m.AlpnProtocols
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CommonTlsContext) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CommonTlsContext_ValidationContext)(nil),
		(*CommonTlsContext_ValidationContextSdsSecretConfig)(nil),
		(*CommonTlsContext_CombinedValidationContext)(nil),
	}
}

type CommonTlsContext_CombinedCertificateValidationContext struct {
	DefaultValidationContext         *CertificateValidationContext `protobuf:"bytes,1,opt,name=default_validation_context,json=defaultValidationContext,proto3" json:"default_validation_context,omitempty"`
	ValidationContextSdsSecretConfig *SdsSecretConfig              `protobuf:"bytes,2,opt,name=validation_context_sds_secret_config,json=validationContextSdsSecretConfig,proto3" json:"validation_context_sds_secret_config,omitempty"`
	XXX_NoUnkeyedLiteral             struct{}                      `json:"-"`
	XXX_unrecognized                 []byte                        `json:"-"`
	XXX_sizecache                    int32                         `json:"-"`
}

func (m *CommonTlsContext_CombinedCertificateValidationContext) Reset() {
	*m = CommonTlsContext_CombinedCertificateValidationContext{}
}
func (m *CommonTlsContext_CombinedCertificateValidationContext) String() string {
	return proto.CompactTextString(m)
}
func (*CommonTlsContext_CombinedCertificateValidationContext) ProtoMessage() {}
func (*CommonTlsContext_CombinedCertificateValidationContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_844857edcba8a23f, []int{5, 0}
}

func (m *CommonTlsContext_CombinedCertificateValidationContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonTlsContext_CombinedCertificateValidationContext.Unmarshal(m, b)
}
func (m *CommonTlsContext_CombinedCertificateValidationContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonTlsContext_CombinedCertificateValidationContext.Marshal(b, m, deterministic)
}
func (m *CommonTlsContext_CombinedCertificateValidationContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonTlsContext_CombinedCertificateValidationContext.Merge(m, src)
}
func (m *CommonTlsContext_CombinedCertificateValidationContext) XXX_Size() int {
	return xxx_messageInfo_CommonTlsContext_CombinedCertificateValidationContext.Size(m)
}
func (m *CommonTlsContext_CombinedCertificateValidationContext) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonTlsContext_CombinedCertificateValidationContext.DiscardUnknown(m)
}

var xxx_messageInfo_CommonTlsContext_CombinedCertificateValidationContext proto.InternalMessageInfo

func (m *CommonTlsContext_CombinedCertificateValidationContext) GetDefaultValidationContext() *CertificateValidationContext {
	if m != nil {
		return m.DefaultValidationContext
	}
	return nil
}

func (m *CommonTlsContext_CombinedCertificateValidationContext) GetValidationContextSdsSecretConfig() *SdsSecretConfig {
	if m != nil {
		return m.ValidationContextSdsSecretConfig
	}
	return nil
}

type UpstreamTlsContext struct {
	CommonTlsContext     *CommonTlsContext     `protobuf:"bytes,1,opt,name=common_tls_context,json=commonTlsContext,proto3" json:"common_tls_context,omitempty"`
	Sni                  string                `protobuf:"bytes,2,opt,name=sni,proto3" json:"sni,omitempty"`
	AllowRenegotiation   bool                  `protobuf:"varint,3,opt,name=allow_renegotiation,json=allowRenegotiation,proto3" json:"allow_renegotiation,omitempty"`
	MaxSessionKeys       *wrappers.UInt32Value `protobuf:"bytes,4,opt,name=max_session_keys,json=maxSessionKeys,proto3" json:"max_session_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpstreamTlsContext) Reset()         { *m = UpstreamTlsContext{} }
func (m *UpstreamTlsContext) String() string { return proto.CompactTextString(m) }
func (*UpstreamTlsContext) ProtoMessage()    {}
func (*UpstreamTlsContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_844857edcba8a23f, []int{6}
}

func (m *UpstreamTlsContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpstreamTlsContext.Unmarshal(m, b)
}
func (m *UpstreamTlsContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpstreamTlsContext.Marshal(b, m, deterministic)
}
func (m *UpstreamTlsContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamTlsContext.Merge(m, src)
}
func (m *UpstreamTlsContext) XXX_Size() int {
	return xxx_messageInfo_UpstreamTlsContext.Size(m)
}
func (m *UpstreamTlsContext) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamTlsContext.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamTlsContext proto.InternalMessageInfo

func (m *UpstreamTlsContext) GetCommonTlsContext() *CommonTlsContext {
	if m != nil {
		return m.CommonTlsContext
	}
	return nil
}

func (m *UpstreamTlsContext) GetSni() string {
	if m != nil {
		return m.Sni
	}
	return ""
}

func (m *UpstreamTlsContext) GetAllowRenegotiation() bool {
	if m != nil {
		return m.AllowRenegotiation
	}
	return false
}

func (m *UpstreamTlsContext) GetMaxSessionKeys() *wrappers.UInt32Value {
	if m != nil {
		return m.MaxSessionKeys
	}
	return nil
}

type DownstreamTlsContext struct {
	CommonTlsContext         *CommonTlsContext   `protobuf:"bytes,1,opt,name=common_tls_context,json=commonTlsContext,proto3" json:"common_tls_context,omitempty"`
	RequireClientCertificate *wrappers.BoolValue `protobuf:"bytes,2,opt,name=require_client_certificate,json=requireClientCertificate,proto3" json:"require_client_certificate,omitempty"`
	RequireSni               *wrappers.BoolValue `protobuf:"bytes,3,opt,name=require_sni,json=requireSni,proto3" json:"require_sni,omitempty"`
	// Types that are valid to be assigned to SessionTicketKeysType:
	//	*DownstreamTlsContext_SessionTicketKeys
	//	*DownstreamTlsContext_SessionTicketKeysSdsSecretConfig
	SessionTicketKeysType isDownstreamTlsContext_SessionTicketKeysType `protobuf_oneof:"session_ticket_keys_type"`
	XXX_NoUnkeyedLiteral  struct{}                                     `json:"-"`
	XXX_unrecognized      []byte                                       `json:"-"`
	XXX_sizecache         int32                                        `json:"-"`
}

func (m *DownstreamTlsContext) Reset()         { *m = DownstreamTlsContext{} }
func (m *DownstreamTlsContext) String() string { return proto.CompactTextString(m) }
func (*DownstreamTlsContext) ProtoMessage()    {}
func (*DownstreamTlsContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_844857edcba8a23f, []int{7}
}

func (m *DownstreamTlsContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownstreamTlsContext.Unmarshal(m, b)
}
func (m *DownstreamTlsContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownstreamTlsContext.Marshal(b, m, deterministic)
}
func (m *DownstreamTlsContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamTlsContext.Merge(m, src)
}
func (m *DownstreamTlsContext) XXX_Size() int {
	return xxx_messageInfo_DownstreamTlsContext.Size(m)
}
func (m *DownstreamTlsContext) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamTlsContext.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamTlsContext proto.InternalMessageInfo

func (m *DownstreamTlsContext) GetCommonTlsContext() *CommonTlsContext {
	if m != nil {
		return m.CommonTlsContext
	}
	return nil
}

func (m *DownstreamTlsContext) GetRequireClientCertificate() *wrappers.BoolValue {
	if m != nil {
		return m.RequireClientCertificate
	}
	return nil
}

func (m *DownstreamTlsContext) GetRequireSni() *wrappers.BoolValue {
	if m != nil {
		return m.RequireSni
	}
	return nil
}

type isDownstreamTlsContext_SessionTicketKeysType interface {
	isDownstreamTlsContext_SessionTicketKeysType()
}

type DownstreamTlsContext_SessionTicketKeys struct {
	SessionTicketKeys *TlsSessionTicketKeys `protobuf:"bytes,4,opt,name=session_ticket_keys,json=sessionTicketKeys,proto3,oneof"`
}

type DownstreamTlsContext_SessionTicketKeysSdsSecretConfig struct {
	SessionTicketKeysSdsSecretConfig *SdsSecretConfig `protobuf:"bytes,5,opt,name=session_ticket_keys_sds_secret_config,json=sessionTicketKeysSdsSecretConfig,proto3,oneof"`
}

func (*DownstreamTlsContext_SessionTicketKeys) isDownstreamTlsContext_SessionTicketKeysType() {}

func (*DownstreamTlsContext_SessionTicketKeysSdsSecretConfig) isDownstreamTlsContext_SessionTicketKeysType() {
}

func (m *DownstreamTlsContext) GetSessionTicketKeysType() isDownstreamTlsContext_SessionTicketKeysType {
	if m != nil {
		return m.SessionTicketKeysType
	}
	return nil
}

func (m *DownstreamTlsContext) GetSessionTicketKeys() *TlsSessionTicketKeys {
	if x, ok := m.GetSessionTicketKeysType().(*DownstreamTlsContext_SessionTicketKeys); ok {
		return x.SessionTicketKeys
	}
	return nil
}

func (m *DownstreamTlsContext) GetSessionTicketKeysSdsSecretConfig() *SdsSecretConfig {
	if x, ok := m.GetSessionTicketKeysType().(*DownstreamTlsContext_SessionTicketKeysSdsSecretConfig); ok {
		return x.SessionTicketKeysSdsSecretConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DownstreamTlsContext) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DownstreamTlsContext_SessionTicketKeys)(nil),
		(*DownstreamTlsContext_SessionTicketKeysSdsSecretConfig)(nil),
	}
}

type SdsSecretConfig struct {
	Name                 string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SdsConfig            *core.ConfigSource `protobuf:"bytes,2,opt,name=sds_config,json=sdsConfig,proto3" json:"sds_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SdsSecretConfig) Reset()         { *m = SdsSecretConfig{} }
func (m *SdsSecretConfig) String() string { return proto.CompactTextString(m) }
func (*SdsSecretConfig) ProtoMessage()    {}
func (*SdsSecretConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_844857edcba8a23f, []int{8}
}

func (m *SdsSecretConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SdsSecretConfig.Unmarshal(m, b)
}
func (m *SdsSecretConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SdsSecretConfig.Marshal(b, m, deterministic)
}
func (m *SdsSecretConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SdsSecretConfig.Merge(m, src)
}
func (m *SdsSecretConfig) XXX_Size() int {
	return xxx_messageInfo_SdsSecretConfig.Size(m)
}
func (m *SdsSecretConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SdsSecretConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SdsSecretConfig proto.InternalMessageInfo

func (m *SdsSecretConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SdsSecretConfig) GetSdsConfig() *core.ConfigSource {
	if m != nil {
		return m.SdsConfig
	}
	return nil
}

type Secret struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Type:
	//	*Secret_TlsCertificate
	//	*Secret_SessionTicketKeys
	//	*Secret_ValidationContext
	Type                 isSecret_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Secret) Reset()         { *m = Secret{} }
func (m *Secret) String() string { return proto.CompactTextString(m) }
func (*Secret) ProtoMessage()    {}
func (*Secret) Descriptor() ([]byte, []int) {
	return fileDescriptor_844857edcba8a23f, []int{9}
}

func (m *Secret) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Secret.Unmarshal(m, b)
}
func (m *Secret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Secret.Marshal(b, m, deterministic)
}
func (m *Secret) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Secret.Merge(m, src)
}
func (m *Secret) XXX_Size() int {
	return xxx_messageInfo_Secret.Size(m)
}
func (m *Secret) XXX_DiscardUnknown() {
	xxx_messageInfo_Secret.DiscardUnknown(m)
}

var xxx_messageInfo_Secret proto.InternalMessageInfo

func (m *Secret) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type isSecret_Type interface {
	isSecret_Type()
}

type Secret_TlsCertificate struct {
	TlsCertificate *TlsCertificate `protobuf:"bytes,2,opt,name=tls_certificate,json=tlsCertificate,proto3,oneof"`
}

type Secret_SessionTicketKeys struct {
	SessionTicketKeys *TlsSessionTicketKeys `protobuf:"bytes,3,opt,name=session_ticket_keys,json=sessionTicketKeys,proto3,oneof"`
}

type Secret_ValidationContext struct {
	ValidationContext *CertificateValidationContext `protobuf:"bytes,4,opt,name=validation_context,json=validationContext,proto3,oneof"`
}

func (*Secret_TlsCertificate) isSecret_Type() {}

func (*Secret_SessionTicketKeys) isSecret_Type() {}

func (*Secret_ValidationContext) isSecret_Type() {}

func (m *Secret) GetType() isSecret_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Secret) GetTlsCertificate() *TlsCertificate {
	if x, ok := m.GetType().(*Secret_TlsCertificate); ok {
		return x.TlsCertificate
	}
	return nil
}

func (m *Secret) GetSessionTicketKeys() *TlsSessionTicketKeys {
	if x, ok := m.GetType().(*Secret_SessionTicketKeys); ok {
		return x.SessionTicketKeys
	}
	return nil
}

func (m *Secret) GetValidationContext() *CertificateValidationContext {
	if x, ok := m.GetType().(*Secret_ValidationContext); ok {
		return x.ValidationContext
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Secret) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Secret_TlsCertificate)(nil),
		(*Secret_SessionTicketKeys)(nil),
		(*Secret_ValidationContext)(nil),
	}
}

func init() {
	proto.RegisterEnum("envoy.api.v3alpha.auth.TlsParameters_TlsProtocol", TlsParameters_TlsProtocol_name, TlsParameters_TlsProtocol_value)
	proto.RegisterType((*TlsParameters)(nil), "envoy.api.v3alpha.auth.TlsParameters")
	proto.RegisterType((*PrivateKeyProvider)(nil), "envoy.api.v3alpha.auth.PrivateKeyProvider")
	proto.RegisterType((*TlsCertificate)(nil), "envoy.api.v3alpha.auth.TlsCertificate")
	proto.RegisterType((*TlsSessionTicketKeys)(nil), "envoy.api.v3alpha.auth.TlsSessionTicketKeys")
	proto.RegisterType((*CertificateValidationContext)(nil), "envoy.api.v3alpha.auth.CertificateValidationContext")
	proto.RegisterType((*CommonTlsContext)(nil), "envoy.api.v3alpha.auth.CommonTlsContext")
	proto.RegisterType((*CommonTlsContext_CombinedCertificateValidationContext)(nil), "envoy.api.v3alpha.auth.CommonTlsContext.CombinedCertificateValidationContext")
	proto.RegisterType((*UpstreamTlsContext)(nil), "envoy.api.v3alpha.auth.UpstreamTlsContext")
	proto.RegisterType((*DownstreamTlsContext)(nil), "envoy.api.v3alpha.auth.DownstreamTlsContext")
	proto.RegisterType((*SdsSecretConfig)(nil), "envoy.api.v3alpha.auth.SdsSecretConfig")
	proto.RegisterType((*Secret)(nil), "envoy.api.v3alpha.auth.Secret")
}

func init() { proto.RegisterFile("envoy/api/v3alpha/auth/cert.proto", fileDescriptor_844857edcba8a23f) }

var fileDescriptor_844857edcba8a23f = []byte{
	// 1569 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x5f, 0x6f, 0x1b, 0xc7,
	0x11, 0xd7, 0x91, 0x14, 0x4d, 0x0d, 0x25, 0x99, 0x5e, 0xab, 0xd5, 0x89, 0x15, 0x6c, 0xea, 0x2c,
	0xcb, 0xac, 0xab, 0x92, 0xb6, 0x64, 0x3f, 0x94, 0x05, 0x0a, 0x8b, 0x74, 0x5d, 0xf9, 0xaf, 0xe4,
	0x23, 0x2d, 0xf4, 0xa1, 0xe8, 0x61, 0x75, 0x5c, 0x89, 0x5b, 0x1d, 0xef, 0xae, 0xb7, 0x4b, 0x4a,
	0x2c, 0xdc, 0x87, 0xe4, 0x25, 0x81, 0x11, 0x20, 0x80, 0x91, 0x87, 0x20, 0x9f, 0x21, 0xc8, 0xb7,
	0x08, 0x02, 0xe4, 0x4b, 0xe4, 0x6b, 0x04, 0x7e, 0x49, 0xb0, 0x7b, 0x77, 0xd2, 0x91, 0x77, 0x94,
	0x68, 0xc3, 0xc8, 0x1b, 0x6f, 0x77, 0xe6, 0x37, 0xb3, 0x33, 0xbf, 0xf9, 0x23, 0xc1, 0x0a, 0xb1,
	0xfb, 0xce, 0xa0, 0x8a, 0x5d, 0x5a, 0xed, 0x6f, 0x62, 0xcb, 0xed, 0xe0, 0x2a, 0xee, 0xf1, 0x4e,
	0xd5, 0x24, 0x1e, 0xaf, 0xb8, 0x9e, 0xc3, 0x1d, 0xf4, 0x7b, 0x29, 0x52, 0xc1, 0x2e, 0xad, 0x04,
	0x22, 0x15, 0x21, 0x52, 0x4c, 0x50, 0x35, 0x1d, 0x8f, 0x54, 0xf7, 0x31, 0x23, 0xbe, 0x6a, 0xf1,
	0xf6, 0x18, 0x11, 0xd3, 0xb1, 0x0f, 0xe8, 0xa1, 0xc1, 0x9c, 0x9e, 0x67, 0x86, 0xb2, 0x4b, 0x87,
	0x8e, 0x73, 0x68, 0x91, 0xaa, 0xfc, 0xda, 0xef, 0x1d, 0x54, 0xb1, 0x3d, 0x08, 0xae, 0x96, 0x47,
	0xaf, 0x18, 0xf7, 0x7a, 0x66, 0xe0, 0x5f, 0xf1, 0xda, 0xe8, 0xed, 0xb1, 0x87, 0x5d, 0x97, 0x78,
	0x2c, 0xb8, 0x5f, 0xe9, 0xb5, 0x5d, 0x5c, 0xc5, 0xb6, 0xed, 0x70, 0xcc, 0xa9, 0x63, 0xb3, 0x6a,
	0x9f, 0x78, 0x8c, 0x3a, 0x36, 0xb5, 0x0f, 0x03, 0x91, 0xc5, 0x3e, 0xb6, 0x68, 0x1b, 0x73, 0x52,
	0x0d, 0x7f, 0xf8, 0x17, 0xda, 0x8f, 0x69, 0x98, 0x6b, 0x59, 0x6c, 0x17, 0x7b, 0xb8, 0x4b, 0x38,
	0xf1, 0x18, 0x7a, 0x0d, 0xcb, 0xdc, 0x62, 0x46, 0x97, 0xda, 0xb4, 0xdb, 0xeb, 0x1a, 0x52, 0xcc,
	0x74, 0x2c, 0x23, 0xc0, 0x54, 0x95, 0x92, 0x52, 0x9e, 0xdf, 0xb8, 0x5b, 0x49, 0x0e, 0x5a, 0x65,
	0x08, 0x4c, 0x7e, 0x05, 0x00, 0xf5, 0xdc, 0xbb, 0xfa, 0xf4, 0xa7, 0x4a, 0xaa, 0xa0, 0xe8, 0x4b,
	0xdc, 0x62, 0xcf, 0x7d, 0xfc, 0xf0, 0x76, 0xcf, 0x47, 0x3f, 0xb5, 0x8e, 0x4f, 0x92, 0xad, 0xa7,
	0x3e, 0x92, 0x75, 0x1f, 0x7f, 0xd4, 0xfa, 0x0d, 0x98, 0x33, 0xa9, 0xdb, 0x21, 0x9e, 0xc1, 0x7a,
	0x94, 0x13, 0xa6, 0xa6, 0x4b, 0xe9, 0xf2, 0x8c, 0x3e, 0xeb, 0x1f, 0x36, 0xe5, 0x19, 0xba, 0x0e,
	0x79, 0x62, 0xb6, 0x3b, 0x86, 0xd9, 0xf3, 0xfa, 0x84, 0xa9, 0x19, 0x29, 0x02, 0xe2, 0xa8, 0x21,
	0x4f, 0xb4, 0x1d, 0xc8, 0x47, 0x2c, 0xa3, 0x59, 0xc8, 0xb5, 0x9e, 0x35, 0x8d, 0xad, 0x57, 0xad,
	0x9d, 0xc2, 0x14, 0xca, 0xc3, 0xa5, 0xd6, 0xb3, 0x66, 0xff, 0xae, 0x71, 0xa7, 0xa0, 0x9c, 0x7d,
	0xdc, 0x2d, 0xa4, 0xce, 0x3e, 0x36, 0x0a, 0xe9, 0xb3, 0x8f, 0xcd, 0x42, 0xa6, 0xb6, 0xf6, 0xcd,
	0xf7, 0x9f, 0x5f, 0x5b, 0x81, 0xeb, 0x91, 0x47, 0x6f, 0x24, 0xbc, 0x57, 0xfb, 0x41, 0x01, 0xb4,
	0xeb, 0xd1, 0x3e, 0xe6, 0xe4, 0x29, 0x19, 0xec, 0x7a, 0x4e, 0x9f, 0xb6, 0x89, 0x87, 0xd6, 0x61,
	0xce, 0x0d, 0x7e, 0x1b, 0x36, 0xee, 0x12, 0x99, 0xc2, 0x99, 0xfa, 0xa5, 0x77, 0xf5, 0x8c, 0x97,
	0x2a, 0x29, 0xfa, 0x6c, 0x78, 0xfb, 0x02, 0x77, 0x09, 0xfa, 0x0b, 0xcc, 0xf2, 0x81, 0x4b, 0xda,
	0x86, 0xcf, 0x61, 0x35, 0x5d, 0x52, 0xca, 0xf9, 0x8d, 0x85, 0x8a, 0x4f, 0xc2, 0x4a, 0x48, 0xc2,
	0xca, 0x96, 0x3d, 0xd8, 0x9e, 0xd2, 0xf3, 0x52, 0xb6, 0x21, 0x45, 0x6b, 0x7f, 0x12, 0x7e, 0xae,
	0xc1, 0x6a, 0xdc, 0xcf, 0xb8, 0x57, 0xf5, 0x39, 0xc8, 0x07, 0x55, 0x22, 0x20, 0x9e, 0x64, 0x72,
	0xa9, 0x42, 0x5a, 0xcf, 0xfa, 0x47, 0xda, 0xd7, 0x19, 0x98, 0x6f, 0x59, 0xac, 0x41, 0x3c, 0x4e,
	0x0f, 0xa8, 0x89, 0x39, 0x41, 0x3b, 0x70, 0xc5, 0x3c, 0xfb, 0x34, 0xcc, 0x0e, 0xa6, 0x3e, 0x19,
	0xf3, 0x1b, 0x5a, 0x02, 0x1d, 0x44, 0x19, 0x56, 0x1e, 0x62, 0x8e, 0x9b, 0xb2, 0x06, 0xf5, 0x42,
	0x44, 0xb9, 0x21, 0x74, 0x51, 0x03, 0xf2, 0xae, 0xef, 0x96, 0x71, 0x44, 0x06, 0x92, 0x59, 0x93,
	0x41, 0x81, 0x7b, 0xfa, 0x1a, 0xf4, 0x2f, 0x58, 0x88, 0x80, 0x18, 0x61, 0x24, 0xd5, 0xac, 0x44,
	0xbb, 0x3d, 0x8e, 0xa7, 0xf1, 0x78, 0xe8, 0xc8, 0x8d, 0x67, 0xee, 0x6f, 0x90, 0x73, 0x31, 0x63,
	0xc7, 0x8e, 0xd7, 0x0e, 0xf2, 0x30, 0x89, 0x7f, 0xa7, 0x3a, 0xe2, 0x89, 0x8e, 0xc9, 0x5c, 0x83,
	0x71, 0xec, 0x5a, 0x44, 0xcd, 0x4c, 0xfe, 0x44, 0xa1, 0xd6, 0x94, 0x5a, 0xa8, 0x0d, 0xcb, 0x8c,
	0x1e, 0xda, 0x82, 0x11, 0x91, 0xf8, 0x73, 0xda, 0x25, 0x8c, 0xe3, 0xae, 0xab, 0x4e, 0x97, 0xd2,
	0x13, 0xa2, 0x16, 0x7d, 0x9c, 0x48, 0x56, 0x5b, 0x21, 0x4a, 0xed, 0x96, 0xe0, 0x8e, 0x06, 0xa5,
	0x44, 0x8e, 0x47, 0x34, 0xb4, 0xcf, 0x14, 0x58, 0x68, 0x59, 0xac, 0x49, 0x98, 0x28, 0xd9, 0x16,
	0x35, 0x8f, 0x08, 0x7f, 0x4a, 0x06, 0x0c, 0x3d, 0x80, 0xcc, 0x11, 0x19, 0x30, 0x55, 0x99, 0xd4,
	0x1f, 0xd9, 0x13, 0xde, 0x2a, 0xa9, 0x9c, 0xa2, 0x4b, 0xcd, 0xda, 0x9f, 0x85, 0x0f, 0x65, 0x58,
	0x4b, 0xf4, 0x21, 0x66, 0x50, 0x7b, 0x33, 0x0d, 0xcb, 0x11, 0xcf, 0xf6, 0xfc, 0xce, 0x4a, 0x1d,
	0xbb, 0xe1, 0xd8, 0x9c, 0x9c, 0x70, 0xb4, 0x05, 0xc0, 0xbd, 0x1e, 0xe3, 0x22, 0x74, 0xf8, 0x3d,
	0xb8, 0x3a, 0x13, 0x68, 0x35, 0x30, 0x7a, 0x04, 0x8b, 0x7d, 0xe2, 0xd1, 0x83, 0xc1, 0x50, 0xf0,
	0x99, 0x7b, 0x44, 0xfd, 0xde, 0x54, 0x9f, 0x7f, 0x57, 0xcf, 0xbf, 0x55, 0x72, 0x5a, 0xd6, 0xcb,
	0x94, 0xd6, 0xcb, 0xeb, 0xfa, 0xef, 0x7c, 0xf1, 0x88, 0x5f, 0x4d, 0xf7, 0x88, 0x8e, 0xc1, 0xe9,
	0x60, 0xd6, 0x51, 0x53, 0x31, 0x9c, 0x07, 0x65, 0x23, 0x01, 0x67, 0x1b, 0xb3, 0x0e, 0xba, 0x7f,
	0x8a, 0xc3, 0x7a, 0xfb, 0xff, 0x21, 0x26, 0x37, 0xb0, 0xc5, 0xfd, 0xae, 0xe2, 0x37, 0xc2, 0x05,
	0xff, 0xba, 0xe9, 0xdf, 0x6e, 0x59, 0x5c, 0x36, 0x95, 0x27, 0x70, 0xd5, 0x23, 0xff, 0xed, 0x51,
	0x8f, 0x18, 0x51, 0x42, 0x4e, 0xcb, 0x90, 0x14, 0x63, 0xbd, 0xa5, 0xee, 0x38, 0xd6, 0x1e, 0xb6,
	0x7a, 0x44, 0xbf, 0x12, 0xa8, 0xed, 0x9c, 0xf1, 0xf1, 0x08, 0x56, 0x43, 0xac, 0x73, 0x79, 0x99,
	0xbd, 0x10, 0x7c, 0x25, 0xc0, 0x69, 0x8e, 0xa5, 0x25, 0xba, 0x07, 0x69, 0xd3, 0xb3, 0xd4, 0x4b,
	0x13, 0xe7, 0x4e, 0x88, 0xa3, 0x1a, 0x2c, 0x61, 0xcb, 0x72, 0x8e, 0x0d, 0x72, 0xe2, 0x52, 0x6f,
	0xd8, 0x43, 0x35, 0x57, 0x52, 0xca, 0x39, 0x7d, 0x51, 0x0a, 0xfc, 0xdd, 0xbf, 0x8f, 0x98, 0xae,
	0xdd, 0x17, 0x24, 0xbc, 0x03, 0x95, 0x38, 0x09, 0xcf, 0xe3, 0x9a, 0xf6, 0xc5, 0x0c, 0x14, 0x1a,
	0x4e, 0xb7, 0xeb, 0xd8, 0xa2, 0x5e, 0x02, 0x02, 0x3e, 0x04, 0x10, 0xd3, 0xd4, 0x15, 0x23, 0x82,
	0x05, 0x04, 0xbc, 0x39, 0xd1, 0xec, 0xd4, 0x67, 0x78, 0xf0, 0xc9, 0xd0, 0x4b, 0x28, 0x08, 0x94,
	0xc8, 0x1b, 0x98, 0x24, 0x4d, 0x7e, 0x63, 0xed, 0x1c, 0xac, 0x88, 0xb7, 0xfa, 0x65, 0x3e, 0xf4,
	0xcd, 0xd0, 0xff, 0x41, 0x1b, 0x81, 0x34, 0x58, 0x9b, 0x19, 0x8c, 0x98, 0x1e, 0xe1, 0xc1, 0xe4,
	0x61, 0x6a, 0x56, 0x1a, 0xb9, 0x35, 0xce, 0x48, 0xb3, 0xcd, 0x9a, 0x52, 0xc1, 0x1f, 0x3f, 0x61,
	0x39, 0x17, 0x14, 0xfd, 0xda, 0xb0, 0xbd, 0x11, 0x41, 0x86, 0x08, 0xa0, 0xfe, 0x69, 0x04, 0x85,
	0x39, 0x11, 0xad, 0xa0, 0xc3, 0xde, 0x1b, 0x67, 0xee, 0xbc, 0xf0, 0x6f, 0x4f, 0xe9, 0x57, 0xfa,
	0xb1, 0xfa, 0x1f, 0xc0, 0x6a, 0xdc, 0x4c, 0xfc, 0xa1, 0x01, 0xbb, 0x26, 0x7d, 0xe7, 0xf6, 0x94,
	0x5e, 0x8a, 0xd9, 0x1a, 0x91, 0x41, 0x5f, 0x2a, 0xf0, 0x07, 0xd3, 0xe9, 0xee, 0x53, 0x51, 0x1f,
	0x09, 0x6f, 0xcd, 0x49, 0x93, 0xcf, 0xc7, 0xbe, 0x75, 0x84, 0x49, 0xe2, 0x40, 0x62, 0x5d, 0x10,
	0x84, 0xa5, 0xd0, 0x66, 0xbc, 0x19, 0xde, 0x84, 0x79, 0x6c, 0xb9, 0xf6, 0xe9, 0x4a, 0x17, 0x6e,
	0x4e, 0x73, 0xe2, 0x34, 0x5c, 0x96, 0x58, 0xf1, 0xe7, 0x14, 0xac, 0x4e, 0x62, 0x0c, 0xbd, 0x86,
	0x62, 0x9b, 0x1c, 0xe0, 0x9e, 0xc5, 0x93, 0xde, 0xa7, 0x7c, 0x78, 0x2e, 0x25, 0x8f, 0xde, 0x48,
	0x1e, 0xa9, 0x81, 0x85, 0xb8, 0xf5, 0x4f, 0x94, 0x09, 0x73, 0x9b, 0x7a, 0xaf, 0xdc, 0x46, 0x6c,
	0x5f, 0x98, 0xe3, 0xda, 0x0b, 0xd1, 0x29, 0x1e, 0xc3, 0x3f, 0x12, 0x3a, 0xc5, 0x87, 0xa4, 0xaf,
	0xf6, 0x47, 0x81, 0xb7, 0x0a, 0xda, 0xc5, 0x78, 0xf5, 0x25, 0x58, 0x4c, 0x78, 0x7d, 0xb0, 0xc8,
	0x4d, 0x17, 0xb2, 0xda, 0x77, 0x29, 0x40, 0xaf, 0x5c, 0xc6, 0x3d, 0x82, 0xbb, 0x91, 0x86, 0xb4,
	0x07, 0xc8, 0x94, 0x58, 0x86, 0x2c, 0xff, 0xa1, 0x64, 0x95, 0x27, 0x25, 0xa3, 0x5e, 0x30, 0x47,
	0x1b, 0x5d, 0x11, 0xd2, 0xcc, 0xa6, 0x32, 0xd8, 0x33, 0x32, 0x86, 0x5e, 0xba, 0xfc, 0x8b, 0xa2,
	0x8b, 0x43, 0x54, 0x85, 0xab, 0x7e, 0x33, 0xf6, 0x88, 0x4d, 0x0e, 0x1d, 0x4e, 0xa5, 0xd3, 0xb2,
	0xda, 0x73, 0x3a, 0x92, 0x57, 0x7a, 0xf4, 0x06, 0x3d, 0x82, 0x42, 0x17, 0x9f, 0x18, 0xcc, 0x1f,
	0xf8, 0x86, 0x5c, 0x2a, 0xfc, 0xd5, 0x69, 0x39, 0x36, 0x4c, 0x5e, 0x3d, 0xb6, 0xf9, 0xe6, 0x86,
	0x3f, 0x4e, 0xe6, 0xbb, 0xf8, 0x24, 0xd8, 0x12, 0xc4, 0x7e, 0x70, 0xce, 0x3a, 0x1c, 0x8f, 0x8c,
	0xf6, 0x6d, 0x06, 0x16, 0x1e, 0x3a, 0xc7, 0xf6, 0x6f, 0x16, 0xb2, 0x7f, 0x42, 0x31, 0x1c, 0xa3,
	0xa6, 0x45, 0x89, 0xcd, 0x87, 0x86, 0x54, 0xea, 0xc2, 0xe1, 0xa9, 0x06, 0xda, 0x0d, 0xa9, 0x1c,
	0xdd, 0xd4, 0xff, 0x0a, 0xf9, 0xd3, 0x01, 0x6d, 0xd3, 0xa0, 0xad, 0x9e, 0x07, 0x05, 0xe1, 0x1c,
	0xb6, 0x29, 0xfa, 0x37, 0x5c, 0x0d, 0x03, 0xcf, 0xe5, 0xaa, 0x15, 0x8d, 0xff, 0xfa, 0x39, 0xf3,
	0x26, 0xb6, 0x9f, 0x89, 0x9e, 0xcc, 0x62, 0x5b, 0xe2, 0xff, 0xe0, 0x66, 0x02, 0x7e, 0x42, 0xe1,
	0x4e, 0xbf, 0x77, 0x53, 0x8e, 0x19, 0x1b, 0x2d, 0xd8, 0xf1, 0xfb, 0x65, 0x52, 0xe6, 0xeb, 0x45,
	0x50, 0x93, 0x5c, 0x15, 0x55, 0xa6, 0x7d, 0xa5, 0xc0, 0xe5, 0xd1, 0x9e, 0x8f, 0x20, 0x73, 0xf6,
	0xe7, 0x9d, 0x2e, 0x7f, 0xa3, 0x06, 0x80, 0x78, 0xda, 0x50, 0x33, 0x5a, 0x1d, 0xb7, 0xc6, 0xf8,
	0x38, 0xe1, 0x12, 0xca, 0xda, 0x2c, 0xf0, 0xbb, 0x2c, 0xfc, 0xbe, 0x11, 0xfc, 0x2b, 0x65, 0xc8,
	0xef, 0x11, 0x17, 0xb4, 0x9f, 0x52, 0x90, 0xf5, 0x0f, 0x12, 0xbd, 0x79, 0x09, 0x97, 0x47, 0xc6,
	0x7e, 0xe0, 0xd2, 0x84, 0x8b, 0xc4, 0xf6, 0x94, 0x3e, 0x3f, 0x3c, 0xda, 0xc7, 0xf1, 0x25, 0xfd,
	0xb1, 0xf8, 0x92, 0xbc, 0x2a, 0x64, 0x3e, 0xf2, 0xaa, 0x50, 0xbb, 0x2e, 0x42, 0x5c, 0x04, 0x35,
	0x21, 0xc4, 0x32, 0x9c, 0xf5, 0x2c, 0x64, 0x44, 0xe2, 0xeb, 0x9b, 0xb0, 0x4a, 0x1d, 0xdf, 0xae,
	0xeb, 0x39, 0x27, 0x83, 0x31, 0x2e, 0xd4, 0x67, 0x84, 0x0f, 0x72, 0xac, 0xee, 0x2a, 0xfb, 0x59,
	0x59, 0x74, 0x9b, 0xbf, 0x06, 0x00, 0x00, 0xff, 0xff, 0x79, 0x26, 0xdc, 0xcc, 0x0d, 0x13, 0x00,
	0x00,
}
